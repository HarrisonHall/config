#!/bin/python
'''
simplenotify
============
Reference notifications by custom id for scripting.

Details:
The program works by binding to a port and receiving all future information by
socketio. If the port is not bound, the instance becomes the server and will run
until there are no more notifications. The script will exit immediately either way
in order to preserve scripting.

Flags: -h shows all flags

Requires (pip):
    pyzmq
    notify2 (which of course requires libnotify)

Note:
    Action and category are not supported because dunst, the notification daemon I uses, doesn't support
    them in this form and I didn't want to test them. 
    If the port happens to be used by another project, change it.
'''

import argparse as ap
import functools
from os import fork
from pathlib import Path
import socket
import time

import notify2 as notify


APP_NAME: str = "simplenotify"  # libnotify source name
URI: Path = Path(f"/tmp/{APP_NAME}.sock")  # unix domain socket
POLL_TIME: float = 0.2  # seconds
MAX_MSG_SIZE: int = 10000  # 10 kb


def is_already_running() -> bool:
    if not URI.exists():
        return False
    try:
        sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        sock.connect(str(URI))
        sock.close()
        return True
    except Exception as e:
        return False
    return False

def receive_data(sock: socket, notifications: dict) -> dict:
    while True:
        try:
            conn, _ = sock.accept()
        except Exception as e:
            time.sleep(POLL_TIME)
            break
        resp: str = conn.recv(MAX_MSG_SIZE).decode()
        if resp == "": continue
        info: list = resp.split(",")
        nid = info[-1]
        if nid == "" or nid not in notifications:
            notifications[nid] = {
                "notification": Notification(info)
            }
        else:
            notifications[nid]["notification"].parse_info(info)
        notifications[nid]["notification"].show()
        conn.close()
    return notifications

def send_notification(notification) -> None:
    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    sock.connect(str(URI))
    sock.send(str(notification).encode())

def server_loop(n: "Notification") -> None:
    notify.init(APP_NAME)
    notifications = {
        n.id : {
            "notification": n,
        }
    }
    n.show()
    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    if URI.exists():
        URI.unlink()
    sock.bind(str(URI))
    sock.setblocking(False)
    sock.listen()
    while len(notifications) > 0:
        to_pop: list = []
        for nid in notifications:
            now = time.time()
            start_time = notifications[nid]["notification"].start_time
            end_length = notifications[nid]["notification"].timeout
            if now - start_time > end_length:
                to_pop.append(nid)
        for p in to_pop:
            notifications.pop(p)
        notifications = receive_data(sock, notifications)
    sock.close()

class Notification:
    def __init__(self, info = None):
        self.has_been_shown = False
        if info:
            self.parse_info(info)
        else:
            self.parse_arguments()
            self.quit_if_empty()

    @functools.cached_property
    def notification(self):
        return notify.Notification(
            self.summary,
            self.message,
            self.icon
        )

    def show(self):
        if self.has_been_shown and not self.reset:
            if (time.time() - self.start_time < self.timeout):
                self.timeout -= (time.time() - self.start_time)
        self.has_been_shown = True
        self.start_time = time.time()    
        self.update()
        self.notification.show()

    def update(self):
        self.notification.update(self.summary, self.message, self.icon)
        self.notification.set_timeout(int(self.timeout) * 1000)
        if "l" in self.urgency.lower():
            self.notification.set_urgency(notify.URGENCY_LOW)
        if "c" in self.urgency.lower():
            self.notification.set_urgency(notify.URGENCY_CRITICAL)
        if "n" in self.urgency.lower():
            self.notification.set_urgency(notify.URGENCY_NORMAL)

    def parse_arguments(self):
        parser = ap.ArgumentParser(
            description='A simple notification system.'
        )
        parser.add_argument(
            '-S', '-s', '--summary', '-T', '-t', '--title',
            action="store", default="",
            help="Notification title"
        )
        parser.add_argument(
            '-M', '-m', '--message',
            action="store", default="",
            help="Notification contents"
        )
        parser.add_argument(
            '-I', '-i', '--icon',
            action="store", default="",
            help="Notification icon"
        )
        parser.add_argument(
            '--timeout',
            action="store", default=10, type=int,
            help="Notification timeout"
        )
        parser.add_argument(
            '-R', "-r", "--reset",
            action="store_true", default=False,
            help="Reset timeout"
        )
        parser.add_argument(
            "-U", "-u", "--urgency",
            action="store", default="normal",
            help="Notification urgency (low, normal, critical)"
        )
        parser.add_argument(
            '--id',
            action="store", default="",
            help="Scripting id"
        )
        
        parser.add_argument(
            '-D', '-d', '--debug', '-V', '-v', '--verbose',
            action="store_true", default=False,
            help="Debug/Verbose printing"
        )
        args = parser.parse_args()
        self.summary = args.summary
        self.message = args.message
        self.icon = args.icon
        self.debug = args.debug
        self.id = args.id
        self.timeout = args.timeout
        self.action=""
        self.urgency = args.urgency
        self.category = ""
        self.reset = args.reset
        if self.debug:
            print(str(self))

    def parse_info(self, info):
        (self.summary, self.message, self.icon,
         self.timeout, self.reset, self.action,
         self.urgency, self.category, self.debug, self.id) = info
        self.timeout = int(self.timeout)
        self.debug = (self.debug.lower() == "true")
        if "true" in self.reset.lower():  self.reset = True
        else:  self.reset = False
        if self.debug:
            print(str(self))

    def quit_if_empty(self):
        if (
                self.summary == "" and
                self.message == "" and
                self.icon == ""
            ):
            exit(0)

    def __str__(self):
        return (
            f"{self.summary},{self.message},{self.icon},"
            f"{self.timeout},{self.reset},{self.action},"
            f"{self.urgency},{self.category},"
            f"{self.debug},{self.id}"
        )


if __name__ == "__main__":
    n = Notification()
    pid = fork()
    if pid != 0:
        exit(0)
    if is_already_running():
        send_notification(n)
    else:
        server_loop(n)
